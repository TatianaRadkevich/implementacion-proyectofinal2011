package Negocio.Compras;
// Generated 12/08/2011 13:27:23 by Hibernate Tools 3.2.1.GA

import Negocio.Deposito.Faltante;
import Negocio.Compras.Material;
import Negocio.Compras.OrdenCompra;
import BaseDeDatos.Compras.EstadoDetalleOrdenCompraBD;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.hibernate.annotations.Cascade;

/**
 * TDetallesOrdenCompra generated by hbm2java
 */
@Entity
@Table(name = "T_DETALLES_ORDEN_COMPRA", schema = "dbo", catalog = "Ramaty")
public class DetalleOrdenCompra implements java.io.Serializable {

    @Id
    @GeneratedValue
    @Column(name = "ID_DETALLE_ORDEN_COMPRA", unique = true, nullable = false, precision = 8, scale = 0)
    private int idDetalleOrdenCompra;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_ORDEN_COMPRA", nullable = true)
    private OrdenCompra TOrdenesCompra;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_MATERIAL")
    private Material TMateriales;
    @Column(name="PRECIO_UNITARIO", precision=6)
    private Float precioUnitario;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_EDETALLE_ORDEN_COMPRA", nullable = true)
    private EstadoDetalleOrdenCompra estado;
    @Column(name = "CANTIDAD_PEDIDA", nullable = true, precision = 3, scale = 0)
    private Short cantidadPedida;
    @Column(name = "CANTIDAD_RECIBIDA", nullable = true, precision = 3, scale = 0)
    private Short cantidadRecibida=Short.parseShort("0");
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "TDetallesOrdenCompra")
    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
    private Set<Faltante> TFaltanteses = new HashSet<Faltante>(0);

    public DetalleOrdenCompra() {
    }

    public DetalleOrdenCompra(Material material, Short cantidad) {
        this.TMateriales = material;
        this.cantidadPedida = cantidad;
    }

    public DetalleOrdenCompra(int idDetalleOrdenCompra, OrdenCompra TOrdenesCompra, short cantidadPedida, short cantidadRecibida) {
        this.idDetalleOrdenCompra = idDetalleOrdenCompra;
        this.TOrdenesCompra = TOrdenesCompra;
        this.cantidadPedida = cantidadPedida;
        this.cantidadRecibida = cantidadRecibida;
    }

    public DetalleOrdenCompra(int idDetalleOrdenCompra, OrdenCompra TOrdenesCompra, Material TMateriales, short cantidadPedida, short cantidadRecibida, Set<Faltante> TFaltanteses) {
        this.idDetalleOrdenCompra = idDetalleOrdenCompra;
        this.TOrdenesCompra = TOrdenesCompra;
        this.TMateriales = TMateriales;
        this.cantidadPedida = cantidadPedida;
        this.cantidadRecibida = cantidadRecibida;
        this.TFaltanteses = TFaltanteses;
    }

    public int getId() {
        return this.idDetalleOrdenCompra;
    }

    public void setId(int idDetalleOrdenCompra) {
        this.idDetalleOrdenCompra = idDetalleOrdenCompra;
    }

    public OrdenCompra getOrdenCompra() {
        return this.TOrdenesCompra;
    }

    public void setOrdenCompra(OrdenCompra TOrdenesCompra) {
        this.TOrdenesCompra = TOrdenesCompra;
    }

    public Material getMaterial() {
        return this.TMateriales;
    }

    public void setMaterial(Material TMateriales) {
        this.TMateriales = TMateriales;
    }

    public Short getCantidadPedida() {
        return this.cantidadPedida;
    }

    public void setCantidadPedida(Short cantidadPedida) {
        this.cantidadPedida = cantidadPedida;
    }

    public Short getCantidadRecibida() {
        return this.cantidadRecibida;
    }

    public void setCantidadRecibida(Short cantidadRecibida) {
        if(cantidadRecibida>cantidadPedida)
            throw new RuntimeException("La cantidad recibida no puede ser mayor que la cantidad pedida");
        
        if(cantidadRecibida<0)
            throw new RuntimeException("La cantidad recibida no puede ser menor que cero(0) ");
         try{
        int stock=this.getMaterial().getStockActual();
        stock+=-this.cantidadRecibida;
        stock+=cantidadRecibida;
        this.getMaterial().setStockActual(new Short(stock+""));
        }catch(Exception e){}

        this.cantidadRecibida = cantidadRecibida;      
        
        if(cantidadRecibida<cantidadPedida)
            this.setEstado(EstadoDetalleOrdenCompraBD.getEstadoConcretadaParcial());
        
         if(cantidadRecibida.equals(cantidadPedida))
            this.setEstado(EstadoDetalleOrdenCompraBD.getEstadoConcretadaTotal());
    }

    public EstadoDetalleOrdenCompra getEstado() {
        return estado;
    }

    public void setEstado(EstadoDetalleOrdenCompra estado) {
        this.estado = estado;
    }

    public Float getPrecioUnitario() {
        return precioUnitario;
    }

    public void setPrecioUnitario(Float precioUnitario) {
        this.precioUnitario = precioUnitario;
    }
    
    public float getSubTotal()
    {
        return precioUnitario*cantidadPedida;
    }

    public Set<Faltante> getFaltantes() {
        return this.TFaltanteses;
    }

    public void removeFaltantes()
    {
        for(Faltante f:this.TFaltanteses)
            f.setDetalleOrdenCompra(null);
        TFaltanteses.clear();
    }

    public void setFaltantes(Set<Faltante> TFaltanteses) {
        this.TFaltanteses = TFaltanteses;
    }
}
