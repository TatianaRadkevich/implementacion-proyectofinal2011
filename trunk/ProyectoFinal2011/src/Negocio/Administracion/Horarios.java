package Negocio.Administracion;
// Generated 21/10/2011 13:42:06 by Hibernate Tools 3.2.1.GA

import BaseDeDatos.HibernateUtil;
import Presentacion.Utilidades;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.hibernate.Hibernate;

/**
 * THorarios generated by hbm2java
 */
@Entity
@Table(name = "T_HORARIOS", schema = "dbo", catalog = "Ramaty")
public class Horarios implements java.io.Serializable {

    @Id
    @GeneratedValue
    @Column(name = "ID_HORARIO", unique = true, nullable = false, precision = 2, scale = 0)
    private short idHorario;
    /*---------------------------------------------------------------------------------------------*/
    @Column(name = "NOMBRE", nullable = false, length = 50)
    private String nombre;
    /*---------------------------------------------------------------------------------------------*/
    @Column(name = "DESCRIPCION", length = 200)
    private String descripcion;
    /*---------------------------------------------------------------------------------------------*/
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "THorarios")
    private Set<AsignacionesDias> TAsignacionesDiases = new HashSet(0);
    /*---------------------------------------------------------------------------------------------*/
//     private Set TAsignacionesHorarios = new HashSet(0);
     /*---------------------------------------------------------------------------------------------*/

    public Horarios() {
    }

    public Horarios(short idHorario, String nombre) {
        this.idHorario = idHorario;
        this.nombre = nombre;
    }

    public Horarios(short idHorario, String nombre, String descripcion, Set TAsignacionesDiases, Set<AsignacionesDias> TAsignacionesHorarios) {
        this.idHorario = idHorario;
        this.nombre = nombre;
        this.descripcion = descripcion;
        this.TAsignacionesDiases = TAsignacionesDiases;
//       this.TAsignacionesHorarios = TAsignacionesHorarios;
    }

    public short getIdHorario() {
        return this.idHorario;
    }

    public void setIdHorario(short idHorario) {
        this.idHorario = idHorario;
    }

    public String getNombre() {
        return this.nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getDescripcion() {
        return this.descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

//    public List<AsignacionesDias> getDiasAsignados() {
//        return new ArrayList<AsignacionesDias>(this.TAsignacionesDiases);
//    }
    public void setDiasAsignados(List<AsignacionesDias> datos) {
        this.TAsignacionesDiases.clear();

        for (AsignacionesDias item : datos) {
            item.setTHorarios(this);
            this.TAsignacionesDiases.add(item);
        }
    }

    public String toStringAsignacionDias() {
        String salida = "";
        for (AsignacionesDias ad : TAsignacionesDiases) {
            salida += "  " + ad.toString();
        }
        return salida;
    }

    public String toString() {
        return this.getNombre();
    }

    @Override
    public boolean equals(Object obj) {
        try {
            Horarios h = (Horarios) obj;
            return h.idHorario == this.idHorario;
        } catch (Exception e) {
        }
        return false;
    }

    public static List<Horarios> getAllHorarios() {
        return HibernateUtil.ejecutarConsulta("FROM Horarios");
    }

    public boolean isPresete(Date tiempo) {
        for (AsignacionesDias ad : this.TAsignacionesDiases) {
            if (ad.isPresente(tiempo)) {
                return true;
            }
        }
        return false;
    }

    public Date getProximoIngreso(Date tiempo) {
        Date salida = null;
        List<AsignacionesDias> l = this.getDiasAsignados();

        Dia d = Dia.parseDia(tiempo);
        Hora ht = new Hora(tiempo);
        AsignacionesDias ad;

        int x = 0;
        for (int i = 0; i < l.size(); i++) {
            x = (i == l.size() - 1) ? 0 : i;
            if (d.isEntre(l.get(i).getDia(), l.get(x).getDia())) {
                Hora haux1 = new Hora(l.get(i).getHoraDesde());
                Hora haux2 = new Hora(l.get(x).getHoraDesde());
                if (haux1.compareTo(ht) <= 0 || haux2.compareTo(ht) >= 0) {
                    salida = Utilidades.agregarTiempoFecha(tiempo, d.cuantosDiasFaltan(l.get(x).getDia()), 0, 0);
                    salida.setHours(haux2.getHora());
                    salida.setMinutes(haux2.getMinuto());
                    salida.setSeconds(haux2.getSegundo());
                    return salida;
                }
            }
        }

        return salida;
    }

     public Date getProximoEgreso(Date tiempo) {
        Date salida = null;
        List<AsignacionesDias> l = this.getDiasAsignados();

        Dia d = Dia.parseDia(tiempo);
        Hora ht = new Hora(tiempo);
        AsignacionesDias ad;

        int x = 0;
        for (int i = 0; i < l.size(); i++) {
            x = (i == l.size() - 1) ? 0 : i;
            if (d.isEntre(l.get(i).getDia(), l.get(x).getDia())) {
                Hora haux1 = new Hora(l.get(i).getHoraHasta());
                Hora haux2 = new Hora(l.get(x).getHoraHasta());
                if (haux1.compareTo(ht) <= 0 || haux2.compareTo(ht) >= 0) {
                    salida = Utilidades.agregarTiempoFecha(tiempo, d.cuantosDiasFaltan(l.get(x).getDia()), 0, 0);
                    salida.setHours(haux2.getHora());
                    salida.setMinutes(haux2.getMinuto());
                    salida.setSeconds(haux2.getSegundo());
                    return salida;
                }
            }
        }

        return salida;
    }

    public List<AsignacionesDias> getDiasAsignados() {
        AsignacionesDias[] ad = (AsignacionesDias[]) TAsignacionesDiases.toArray();
        Arrays.sort(ad, new Comparator<AsignacionesDias>() {

            public int compare(AsignacionesDias o1, AsignacionesDias o2) {
                return o1.compareTo(o2);
            }
        });

        return Arrays.asList(ad);
    }
//@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="THorarios")
//    public Set getTAsignacionesHorarios() {
//        return this.TAsignacionesHorarios;
//    }
//
//    public void setTAsignacionesHorarios(Set TAsignacionesHorarios) {
//        this.TAsignacionesHorarios = TAsignacionesHorarios;
//    }
}
