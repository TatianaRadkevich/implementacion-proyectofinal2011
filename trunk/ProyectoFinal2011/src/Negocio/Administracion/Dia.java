package Negocio.Administracion;
// Generated 21/10/2011 13:42:06 by Hibernate Tools 3.2.1.GA

import BaseDeDatos.Administracion.HorarioBD;
import Negocio.Exceptiones.NegocioException;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * TDias generated by hbm2java
 */
@Entity
@Table(name = "T_DIAS", schema = "dbo", catalog = "Ramaty")
public class Dia implements java.io.Serializable ,Comparable<Dia>{

    @Id
    @GeneratedValue
    @Column(name = "ID_DIA", unique = true, nullable = false, precision = 2, scale = 0)
    private short idDia;
    /*---------------------------------------------------------------------------------------------*/
    @Column(name = "NOMBRE", nullable = false, length = 20)
    private String nombre;
    /*---------------------------------------------------------------------------------------------*/

    public Dia() {
    }

    public Dia(String nombre) {
        this.nombre = nombre;
    }

    public Dia(short idDia, String nombre) {
        this.idDia = idDia;
        this.nombre = nombre;
    }

    public Dia(short idDia, String nombre, Set TAsignacionesDiases) {
        this.idDia = idDia;
        this.nombre = nombre;

    }

    public short getIdDia() {
        return this.idDia;
    }

    public void setIdDia(short idDia) {
        this.idDia = idDia;
    }

    public String getNombre() {
        return this.nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    @Override
    public String toString() {
        return nombre;
    }

    @Override
    public boolean equals(Object obj) {
        try {
            return ((Dia) obj).nombre.toLowerCase().trim().equals(this.nombre.toLowerCase().trim());
        } catch (Exception e) {
        }
        return false;
    }

    public static Dia parseDia(Date tiempo) {
        if (tiempo == null) {
            throw new NegocioException("Fecha no puede ser null");
        }

        GregorianCalendar gc = new GregorianCalendar();
        gc.setTime(tiempo);
        switch (gc.get(GregorianCalendar.DAY_OF_WEEK)) {
            case GregorianCalendar.MONDAY://lunes
                return HorarioBD.getDia(HorarioBD.DiaSemana.Lunes);
            case GregorianCalendar.TUESDAY://martes
                return HorarioBD.getDia(HorarioBD.DiaSemana.Martes);
            case GregorianCalendar.WEDNESDAY://miercoles
                return HorarioBD.getDia(HorarioBD.DiaSemana.Miercoles);
            case GregorianCalendar.THURSDAY://jueves
                return HorarioBD.getDia(HorarioBD.DiaSemana.Jueves);
            case GregorianCalendar.FRIDAY://viernes
                return HorarioBD.getDia(HorarioBD.DiaSemana.Viernes);
            case GregorianCalendar.SATURDAY://sabado
                return HorarioBD.getDia(HorarioBD.DiaSemana.Sabado);
            case GregorianCalendar.SUNDAY://domingo
                return HorarioBD.getDia(HorarioBD.DiaSemana.Domingo);
            default:
                throw new NegocioException("Fecha con dia invalido");
        }
    }

    public Dia nextDay() {

        if (this.getNombre().equals(HorarioBD.DiaSemana.Lunes)) {
            return HorarioBD.getDia(HorarioBD.DiaSemana.Martes);
        } else if (this.getNombre().equals(HorarioBD.DiaSemana.Martes)) {
            return HorarioBD.getDia(HorarioBD.DiaSemana.Miercoles);
        } else if (this.getNombre().equals(HorarioBD.DiaSemana.Miercoles)) {
            return HorarioBD.getDia(HorarioBD.DiaSemana.Jueves);
        } else if (this.getNombre().equals(HorarioBD.DiaSemana.Jueves)) {
            return HorarioBD.getDia(HorarioBD.DiaSemana.Viernes);
        } else if (this.getNombre().equals(HorarioBD.DiaSemana.Viernes)) {
            return HorarioBD.getDia(HorarioBD.DiaSemana.Sabado);
        } else if (this.getNombre().equals(HorarioBD.DiaSemana.Sabado)) {
            return HorarioBD.getDia(HorarioBD.DiaSemana.Domingo);
        } else if (this.getNombre().equals(HorarioBD.DiaSemana.Domingo)) {
            return HorarioBD.getDia(HorarioBD.DiaSemana.Lunes);
        }

        return null;

    }


    public int cuantosDiasFaltan(Dia dia) {
        Dia d = this;
        int x=0;
        do {
            if(d.equals(dia))
                return x;
            d = d.nextDay();
            x++;
        } while (true);

    }

    public boolean isEntre(Dia dMin, Dia dMax) {
        Dia d = dMin;
        do {
            if (d.equals(this)) {
                return true;
            }
            if(d.equals(dMax))
                return false;
            d = d.nextDay();
        } while (true);
       
    }
@Override
    public int compareTo(Dia dia) {
        return this.getIdDia()-dia.getIdDia();
    }
}
