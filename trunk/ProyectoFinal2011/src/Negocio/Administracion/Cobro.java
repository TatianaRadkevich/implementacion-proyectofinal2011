package Negocio.Administracion;
// Generated 12/08/2011 13:27:23 by Hibernate Tools 3.2.1.GA

import Negocio.Administracion.FormaPago;
import Negocio.Administracion.Factura;
import Negocio.Administracion.Empleado;
import Negocio.Administracion.Cheque;
import Negocio.Exceptiones.NegocioException;
import Presentacion.Utilidades;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * TCobros generated by hbm2java
 */
@Entity
@Table(name = "T_COBROS", schema = "dbo", catalog = "Ramaty")
public class Cobro implements java.io.Serializable {

    @Id
    @GeneratedValue
    @Column(name = "ID_COBRO", unique = true, nullable = false, precision = 8, scale = 0)
    private int idCobro;
    //
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_FACTURA")
    private Factura TFacturas;
    //
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_FORMA_PAGO", nullable = false)
    private FormaPago TFormasPago;
    //
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_ENCARGADO", nullable = false)
    private Empleado TEmpleados;
    //
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_CHEQUE")
    private Cheque TCheques;
    //
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "FEC_HORA_COBRO", nullable = false, length = 23)
    private Date fecCobro;
    //
    @Column(name = "IMPORTE", nullable = false, precision = 6, scale = 4)
    private BigDecimal importe;
    //
    @Column(name = "OBSERVACIONES", length = 200)
    private String observaciones;
    //
    @Transient
    private Factura facturaTemp;

    public Cobro(Factura f) {
        this.facturaTemp = f;
        this.importe=new BigDecimal(0);
    }

    public int getId() {
        return this.idCobro;
    }

    public Factura getFactura() {
        return (TFacturas == null) ? facturaTemp : TFacturas;
    }

    public void setFactura(Factura f) {
        this.TFacturas = f;
        this.facturaTemp = f;
    }

    public FormaPago getFormaPago() {
        return this.TFormasPago;
    }

    public void setFormaPago(FormaPago TFormasPago) {
        this.TFormasPago = TFormasPago;
    }

    public Empleado getEmpleado() {
        return this.TEmpleados;
    }

    public void setgetEmpleado(Empleado TEmpleados) {
        this.TEmpleados = TEmpleados;
    }

    public Cheque getCheque() {
        return this.TCheques;
    }

    public void setCheque(Cheque TCheques) {
        this.TCheques = TCheques;
        if(TCheques!=null)
            TCheques.setMonto(this.getImporte());
    }

    public Date getFechaCobro() {
        return this.fecCobro;
    }

    public void setFechaCobro(Date fecCobro) {
        this.fecCobro = fecCobro;
    }

    public BigDecimal getImporte() {
        return this.importe;
    }

    public void setImporte(BigDecimal importe) {

        Utilidades.validarNULL(importe);
        if (importe.floatValue() <= 0) {
            throw new NegocioException("El importe debe ser mayor que cero");
        }
        if (importe.floatValue() > this.getFactura().getTotalAdeudado()) {
            throw new NegocioException("El importe no puede superar el monto adeudado");
        }
        this.importe = importe;
        if (this.TCheques != null) {
            this.TCheques.setMonto(importe);
            
        }
    }

    public String getObservaciones() {
        return this.observaciones;
    }

    public void setObservaciones(String observaciones) {
        this.observaciones = observaciones;
    }
}
