/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JCheckList.java
 *
 * Created on 06/06/2011, 15:42:46
 */

package Presentacion;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.AbstractListModel;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Rodrigo
 */
public class JCheckList <E> extends javax.swing.JPanel {

    /** Creates new form JCheckList */
    public JCheckList() {
        initComponents();
        iniciar();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setViewportView(lista);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lista;
    // End of variables declaration//GEN-END:variables

    public void setData(E[] item)
    {
        Vector<CheckListItem> aux=new Vector<CheckListItem>();        
        for(int i=0;i<item.length;i++)        
            aux.add(new CheckListItem(item[i]));
        lista.setListData(aux);
    }
    
    public E[] getSelectedItems()
    {
        ListModel modelo=lista.getModel();
        Vector salida=new Vector();
        
        for(int i=0;i<modelo.getSize();i++)
        {
            CheckListItem item=(CheckListItem) modelo.getElementAt(i);
            if(item.isSelected)
                salida.add(item.getContenido());
        }
        return (E[]) salida.toArray();
    }

    private void iniciar()
    {
      // Use a CheckListRenderer (see below)
      // to renderer list cells

      lista.setCellRenderer(new CheckListRenderer());
      lista.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

      // Add a mouse listener to handle changing selection

      lista.addMouseListener(new MouseAdapter()
      {
         public void mouseClicked(MouseEvent event)
         {
            JList list = (JList) event.getSource();

            // Get index of item clicked
            int index = list.locationToIndex(event.getPoint());
            CheckListItem item = (CheckListItem)list.getModel().getElementAt(index);

            // Toggle selected state
            item.setSelected(! item.isSelected());

            // Repaint cell
            list.repaint(list.getCellBounds(index, index));
         }
      });
    }

    private class CheckListItem
    {
       private String  label;
       private boolean isSelected = false;
       private E contenido=null;

       public CheckListItem(String label)
       {
          this.label = label;
       }

       public CheckListItem(E contenido)
       {
          this.contenido=contenido;
          this.label=contenido.toString();
       }

       public CheckListItem(String label,E contenido)
       {
           this.label = label;
          this.contenido=contenido;
       }

        private CheckListItem()
        {
        }

        public E getContenido() {
            return contenido;
        }

        public void setContenido(E contenido) {
            this.contenido = contenido;
        }


       public boolean isSelected()
       {
          return isSelected;
       }

       public void setSelected(boolean isSelected)
       {
          this.isSelected = isSelected;
       }

       public String toString()
       {
          return label;
       }
    }

// Handles rendering cells in the list using a check box
private class CheckListRenderer extends JCheckBox   implements ListCellRenderer
    {
        public Component getListCellRendererComponent(
                JList list, Object value, int index,
                boolean isSelected, boolean hasFocus)
       {
            setEnabled(list.isEnabled());
            setSelected(((CheckListItem)value).isSelected());
            setFont(list.getFont());
            setBackground(list.getBackground());
            setForeground(list.getForeground());
            setText(value.toString());
            return this;
       }
    }

}
