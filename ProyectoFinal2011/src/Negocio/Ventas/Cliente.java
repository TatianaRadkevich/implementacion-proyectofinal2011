package Negocio.Ventas;
// Generated 12/08/2011 13:27:23 by Hibernate Tools 3.2.1.GA
import java.util.Date;
import BaseDeDatos.Ventas.ClienteBD;
import Negocio.Web.ClienteWeb;
import Negocio.UbicacionGeografica.Domicilio;
import Negocio.GestionUsuario.Usuario;
import Negocio.NegocioException;
import Presentacion.Utilidades;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import javax.persistence.OneToMany;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * TClientes generated by hbm2java
 */
@Entity
@Table(name = "T_CLIENTES", schema = "dbo", catalog = "Ramaty")
public class Cliente implements java.io.Serializable {

    @Id
    @GeneratedValue
    @Column(name = "ID_CLIENTE", unique = true, nullable = false, precision = 5, scale = 0)
    private int id=-1;
    //
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_DOMICILIO")
    private Domicilio domicilio;//domicilio;//TDomicilios
    //
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_CLIENTE_WEB")//, nullable=false)
    private ClienteWeb TClientesWeb;
    //
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_USUARIO")//, nullable=false)
    private Usuario TUsuarios;
    //
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_TCLIENTE", nullable = false)
    private TipoCliente tipoCliente;//TTcliente
    //
    @Column(name = "CORREO_ELECTRONICO", length = 50)
    private String correoElectronico;
    //
    @Column(name = "CUIT", length = 20, nullable = false)
    private String cuit;
    //
    @Column(name = "RAZON_SOCIAL", nullable = false, length = 50)
    private String razonSocial;
    //
    @Column(name = "NOMBRE_RESPONSABLE", nullable = false, length = 50)
    private String nombreResponsable;
    //
    @Column(name = "APELLIDO_RESPONSABLE", nullable = false, length = 50)
    private String apellidoResponsable;
    //
    @Column(name = "TELEFONO_RESPONSABLE", precision = 13)
    private Long telefonoResponsable;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "FEC_BAJA", length = 23)
    private Date fechaBaja;
    //
    @Column(name = "MOTIVO_BAJA", length = 100)
    private String motivoBaja;
    //
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "TClientes")
    private Set<Pedido> TPedidoses = new HashSet<Pedido>(0);

    // <editor-fold defaultstate="collapsed" desc="Constructores">
    public Cliente() {
    }

    public Cliente(String cuil, String razonSocial) {
        this.cuit = cuil;
        this.razonSocial = razonSocial;
    }

    public Cliente(int idCliente, ClienteWeb TClientesWeb, Usuario TUsuarios, TipoCliente TTcliente, String cuil, String razonSocial, String nombreResponsable, String apellidoResponsable, Long telefonoResponsable) {
        this.id = idCliente;
        this.TClientesWeb = TClientesWeb;
        this.TUsuarios = TUsuarios;
        this.tipoCliente = TTcliente;
        this.cuit = cuil;
        this.razonSocial = razonSocial;
        this.nombreResponsable = nombreResponsable;
        this.apellidoResponsable = apellidoResponsable;
        this.telefonoResponsable = telefonoResponsable;
    }

    public Cliente(int idCliente, Domicilio TDomicilios, ClienteWeb TClientesWeb, Usuario TUsuarios, TipoCliente TTcliente, String correoElectronico, String cuil, String razonSocial, String nombreResponsable, String apellidoResponsable, Long telefonoResponsable, Set<Pedido> TPedidoses) {
        this.id = idCliente;
        this.domicilio = TDomicilios;
        this.TClientesWeb = TClientesWeb;
        this.TUsuarios = TUsuarios;
        this.tipoCliente = TTcliente;
        this.correoElectronico = correoElectronico;
        this.cuit = cuil;
        this.razonSocial = razonSocial;
        this.nombreResponsable = nombreResponsable;
        this.apellidoResponsable = apellidoResponsable;
        this.telefonoResponsable = telefonoResponsable;
        this.TPedidoses = TPedidoses;
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="set/get">
    public int getId() {
        return this.id;
    }

    public Domicilio getDomicilio() {
        return this.domicilio;
    }

    public void setDomicilio(Domicilio domicilio) {
        this.domicilio = domicilio;
    }

    public ClienteWeb getClienteWeb() {
        return this.TClientesWeb;
    }

    public void setClienteWeb(ClienteWeb clienteWeb) {

        this.TClientesWeb = clienteWeb;
    }

    public Usuario getUsuario() {
        return this.TUsuarios;
    }

    public void setUsuario(Usuario usuario) {
        this.TUsuarios = usuario;
    }

    public TipoCliente getTipoCliente() {
        return this.tipoCliente;
    }

    public void setTipoCliente(TipoCliente tipoCliente) {
        this.tipoCliente = Utilidades.validarNULL(tipoCliente);
    }

    public String getCorreoElectronico() {
        return this.correoElectronico;
    }

    public void setCorreoElectronico(String correoElectronico) {
        this.correoElectronico = Utilidades.validarString(correoElectronico, true, 50, Utilidades.RegexType.MAIL);
    }

    public String getCuit() {
        return this.cuit;
    }

    public void setCuit(String cuit) {
        this.cuit = Utilidades.validarString(cuit, false, 20, Utilidades.RegexType.CUIT);
    }

    public String getRazonSocial() {
        return this.razonSocial;
    }

    public void setRazonSocial(String razonSocial) {
        this.razonSocial = Utilidades.validarString(razonSocial, false, 50);
    }

    public String getNombreResponsable() {
        return this.nombreResponsable;
    }

    public void setNombreResponsable(String nombreResponsable) {
        this.nombreResponsable = Utilidades.validarString(nombreResponsable, false, 50);
    }

    public String getApellidoResponsable() {
        return this.apellidoResponsable;
    }

    public void setApellidoResponsable(String apellidoResponsable) {
        this.apellidoResponsable = Utilidades.validarString(apellidoResponsable, false, 50);;
    }

    public Long getTelefonoResponsable() {
        return this.telefonoResponsable;
    }

    public void setTelefonoResponsable(Long telefonoResponsable) {
        this.telefonoResponsable = telefonoResponsable;
    }

    public Date getFechaBaja() {
        return this.fechaBaja;
    }

    private void setFechaBaja(Date fechaBaja) {
        this.fechaBaja = fechaBaja;
    }

    public String getMotivoBaja() {
        return this.motivoBaja;
    }

    public void setMotivoBaja(String motivoBaja) {
        this.motivoBaja = motivoBaja;
    }

    public Set<Pedido> getPedidos() {
        return this.TPedidoses;
    }

    public void setPedidos(Set<Pedido> pedidos) {
        this.TPedidoses = pedidos;
    }
// </editor-fold>

    @Override
    public String toString() {
        return this.razonSocial;//+"("+this.cuil+")";
    }

    private void isOK() throws NegocioException {
        ArrayList<String> aux = new ArrayList<String>();
        if (this.razonSocial == null) {
            aux.add("'Razon Social'");
        }
        if (this.tipoCliente == null) {
            aux.add("'Tipo Cliente'");
        }
        if (this.nombreResponsable == null) {
            aux.add("'Nombre del Responsable'");
        }
        if (this.apellidoResponsable == null) {
            aux.add("'Apellido del Responsable'");
        }
        if (this.cuit == null) {
            aux.add("'CUIT'");
        }

        if (!aux.isEmpty()) {
            String mensaje = "Estos campos no pueden estar vacÃ­os:";
            for (String s : aux) {
                mensaje += "\n>> " +s;
            }
            throw new NegocioException(mensaje);
        }

    }

    public void guardar() throws NegocioException {
        isOK();
        //validaciones Negocio

        if(this.getId()==-1)
            ClienteBD.guardar(this);
        else
            ClienteBD.modificar(this);
    }

    public void eliminar(String motivoBaja) throws NegocioException {
        isOK();
        //validaciones Negocio

        this.setFechaBaja(Utilidades.getFechaActual());
        this.setMotivoBaja(motivoBaja);

        ClienteBD.modificar(this);
    }
}
