package Negocio.Ventas;
// Generated 12/08/2011 13:27:23 by Hibernate Tools 3.2.1.GA

import BaseDeDatos.Ventas.EstadoDetallePedidoBD;
import BaseDeDatos.Ventas.EstadoPedidoBD;
import BaseDeDatos.Ventas.PedidoBD;
import Negocio.Administracion.Empleado;
import Negocio.Administracion.Factura;
import Negocio.Exceptiones.NegocioException;
import Negocio.Produccion.PlanProduccion;
import Presentacion.Utilidades;
import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.Cascade;

/**
 * TPedidos generated by hbm2java
 */
@Entity
@Table(name = "T_PEDIDOS", schema = "dbo", catalog = "Ramaty")
public class Pedido implements java.io.Serializable {

    // <editor-fold defaultstate="collapsed" desc="atributos">
    @Id
    @GeneratedValue
    @Column(name = "ID_PEDIDO", unique = true, nullable = false, precision = 8, scale = 0)
    private int idPedido = -1;
    //
    @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_TPEDIDO")//, nullable=false)
    private TipoPedido TTpedido;
    //
    @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_CLIENTE")//, nullable=false)
    private Cliente TClientes;
    //
    @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_EPEDIDO")//, nullable=false)
    private EstadoPedido TEpedido;
    //
//    @Column(name = "ENTREGA_MATERIAL")
//    private Boolean entregaMaterial;
    @Temporal(value = TemporalType.TIMESTAMP)
    @Column(name = "FEC_HORA_ESTIMADA_ENTREGA")
    private Date fecHoraEstimadaEntrega;
    //
    @Temporal(value = TemporalType.TIMESTAMP)
    @Column(name = "FEC_HORA_GENERACION")
    private Date fecHoraGeneracion;
    //
    @Temporal(value = TemporalType.TIMESTAMP)
    @Column(name = "FEC_CLI_REC")
    private Date fechaClienteRecep;
    //
    @Temporal(value = TemporalType.TIMESTAMP)
    @Column(name = "FEC_HORA_REAL_ENTREGA")
    private Date fecHoraRealEntrega;
    //
    @Temporal(value = TemporalType.TIMESTAMP)
    @Column(name = "FEC_SOLICITADA")
    private Date fecNecesidad;
    //
    @Column(name = "PRIORIDAD")
    private byte prioridad = -1;
    //
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "FEC_BAJA")
    private Date fecBaja;
    //
    @Column(name = "MOTIVO_BAJA", length = 100)
    private String motivoBaja;
    //
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_FACTURA")
    private Factura TFacturas;
    //
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_EMPLEADO", nullable = true)
    private Empleado empleado;
    //
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "TPedidos")
    private Set<PlanProduccion> TPlanesProduccions = new HashSet<PlanProduccion>(0);
    //
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "TPedidos")
    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
    private Set<DetallePedido> TDetallesPedidos = new HashSet<DetallePedido>(0);
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="constructores">
    public Pedido() {
    }

    public Pedido(int idPedido, TipoPedido TTpedido, Cliente TClientes, EstadoPedido TEpedido, Date fecHoraEstimadaEntrega, Date fecHoraGeneracion, Date fecHoraRealEntrega, Date fecSolicitada, byte prioridad) {
        this.idPedido = idPedido;
        this.TTpedido = TTpedido;
        this.TClientes = TClientes;
        this.TEpedido = TEpedido;
        this.fecHoraEstimadaEntrega = fecHoraEstimadaEntrega;
        this.fecHoraGeneracion = fecHoraGeneracion;
        this.fecHoraRealEntrega = fecHoraRealEntrega;
        this.fecNecesidad = fecSolicitada;
        this.prioridad = prioridad;
    }

    public Pedido(int idPedido, TipoPedido TTpedido, Cliente TClientes, EstadoPedido TEpedido, Date fecHoraEstimadaEntrega, Date fecHoraGeneracion, Date fecHoraRealEntrega, Date fecSolicitada, byte prioridad, Set<DetallePedido> TDetallesPedidos) {
        this.idPedido = idPedido;
        this.TTpedido = TTpedido;
        this.TClientes = TClientes;
        this.TEpedido = TEpedido;

        this.fecHoraEstimadaEntrega = fecHoraEstimadaEntrega;
        this.fecHoraGeneracion = fecHoraGeneracion;
        this.fecHoraRealEntrega = fecHoraRealEntrega;
        this.fecNecesidad = fecSolicitada;
        this.prioridad = prioridad;
        //this.TPlanesProduccions = TPlanesProduccions;
        this.TDetallesPedidos = TDetallesPedidos;
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="set/get">
    public int getIdPedido() {
        return this.idPedido;
    }

    public TipoPedido getTipoPedido() {
        return this.TTpedido;
    }

    public void setTipoPedido(TipoPedido tipo) {
        Utilidades.validarNULL(tipo);
        this.TTpedido = tipo;
    }

    public Cliente getCliente() {
        return this.TClientes;
    }

    public void setCliente(Cliente cliente) {
        Utilidades.validarNULL(cliente);
        this.TClientes = cliente;
    }

    public EstadoPedido getEstadoPedido() {
        return this.TEpedido;
    }

    public void setEstadoPedido(EstadoPedido estado) {
        Utilidades.validarNULL(estado);
        this.TEpedido = estado;
    }

    public Date getFechaEstimadaEntrega() {
        return this.fecHoraEstimadaEntrega;
    }

    public void setFechaEstimadaEntrega(Date fecha) {
        Utilidades.validarNULL(fecha);
        this.fecHoraEstimadaEntrega = fecha;
    }

    public Date getFechaGeneracion() {
        return this.fecHoraGeneracion;
    }

    private void setFechaGeneracion(Date fecha) {
        this.fecHoraGeneracion = fecha;
    }

    public Date getFechaRealEntrega() {
        return this.fecHoraRealEntrega;
    }

    public void setFechaRealEntrega(Date fecha) {
        this.fecHoraRealEntrega = fecha;
    }

    public Date getFechaNecesidad() {
        return this.fecNecesidad;
    }

    public void setFechaNecesidad(Date fecha) {
        Utilidades.validarNULL(fecha);
        this.fecNecesidad = fecha;
    }

    public byte getPrioridad() {
        return this.prioridad;
    }

    public String getPrioridadTexto() {
        switch (this.prioridad) {
            case 0:
                return "Baja";
            case 1:
                return "Media";
            case 2:
                return "Alta";
            case 3:
                return "Muy Alta";
            default:
                return "Valor inv√°lido - " + this.prioridad;
        }
    }

    public void setPrioridad(byte prioridad) {
        if (prioridad < 0) {
            throw new NegocioException("Valor incorrecto");
        }
        this.prioridad = prioridad;
    }

    public Empleado getEmpleado() {
        return empleado;
    }

    public void setEmpleado(Empleado empleado) {
        Utilidades.validarNULL(empleado);
        this.empleado = empleado;
    }

    public PlanProduccion getPlanProduccion() {
        if (this.TPlanesProduccions.isEmpty()) {
            return null;
        } else {
            return this.TPlanesProduccions.iterator().next();
        }
    }

    public void setPlanProduccion(PlanProduccion planes) {
        this.TPlanesProduccions.clear();
        this.TPlanesProduccions.add(planes);
    }

    public List<DetallePedido> getDetallePedido() {
        return new ArrayList<DetallePedido>(TDetallesPedidos);
    }

    public void setDetallePedido(List<DetallePedido> detalle) {
        this.TDetallesPedidos.clear();
        for (DetallePedido dt : detalle) {
            dt.setPedido(this);
            TDetallesPedidos.add(dt);
        }

    }

    public void addDetallePedido(DetallePedido dp) {
        dp.setPedido(this);
        dp.setEstadoDetallePedido(EstadoDetallePedidoBD.getEstadoPendiente());
        this.TDetallesPedidos.add(dp);
    }

    public void removeDetallePedido(DetallePedido det) {
        if (this.TDetallesPedidos.remove(det)) {
            det.setPedido(null);
        }
    }

    public Date getFecBaja() {
        return this.fecBaja;
    }

    private void setFecBaja(Date fecBaja) {
        this.fecBaja = fecBaja;
    }

    public String getMotivoBaja() {
        return this.motivoBaja;
    }

    private void setMotivoBaja(String motivoBaja) {
        this.motivoBaja = motivoBaja;
    }

    public Date getFechaClienteRecep() {
        return fechaClienteRecep;
    }

    public void setFechaClienteRecep(Date fechaClienteRecep) {
        this.fechaClienteRecep = fechaClienteRecep;
    }

    public Factura getFactura() {
        return this.TFacturas;
    }

    public void setTFacturas(Factura TFacturas) {
        this.TFacturas = TFacturas;
    }

    // </editor-fold>
    @Override
    public boolean equals(Object obj) {
        return super.equals(obj);
    }

    private void isOK() throws NegocioException {
        String mensaje = "";
        ArrayList<String> aux = new ArrayList<String>();
        if (this.getCliente() == null) {
            aux.add("'Cliente'");
        }

        if (this.getEmpleado() == null) {
            aux.add("'Empleado'");
        }

        if (this.getFechaEstimadaEntrega() == null) {
            aux.add("'Fecha Estimada Entrega'");
        }
        if (this.getFechaNecesidad() == null) {
            aux.add("'Fecha Nesecidad'");
        }
        if (this.getPrioridad() == -1) {
            aux.add("'Prioridad'");
        }

        if (!aux.isEmpty()) {
            mensaje = "Estos campos no pueden estar vac√≠os:";
            for (String s : aux) {
                mensaje += "\n>> " + s;
            }
        }

        if (this.getDetallePedido() == null || this.getDetallePedido().isEmpty()) {
            mensaje += "\nEl pedido debe tener como m√≠nimo un item en el detalle.";

        }

        if (mensaje.isEmpty() == false) {
            throw new NegocioException(mensaje);
        }
    }

    public void isModificable() throws NegocioException {
        String mensaje = "";
        try {
            isOK();
        } catch (NegocioException e) {
            mensaje = e.getMessage();
        }
        if (this.getIdPedido() == -1) {
            mensaje += "\nEl pedido debe estar estar Registrado";
        }
        if ((this.getEstadoPedido().equals(EstadoPedidoBD.getEstadoAutorizadoPendiente())
                || this.getEstadoPedido().equals(EstadoPedidoBD.getEstadoNoAutorizado())
                || this.getEstadoPedido().equals(EstadoPedidoBD.getEstadoPlanificado())) == false) {
            mensaje += "Solo los pedidos 'No Autorizados', 'Autorizados/Pendientes' o 'Planificados'"
                    + "pueden ser procesados";
        }
        if (mensaje.isEmpty() == false) {
            throw new NegocioException(mensaje);
        }
    }

    public void isCancelableble() throws NegocioException {
        isModificable();
    }

    public void guardarModificar() throws NegocioException {
        if (this.getIdPedido() == -1) {
            isOK();
            this.setFechaGeneracion(Utilidades.getFechaActual());
            this.setEstadoPedido(EstadoPedidoBD.getEstadoAutorizadoPendiente());
            PedidoBD.guardar(this);
        } else {
            isModificable();
            PedidoBD.modificar(this);
        }
    }

    public void cancelar(String motivo) throws NegocioException {
        isCancelableble();

        this.setFecBaja(Utilidades.getFechaActual());
        this.setMotivoBaja(motivoBaja);
        this.setEstadoPedido(EstadoPedidoBD.getEstadoCancelado());
        PedidoBD.modificar(this);
    }

    public BigDecimal getMontoTotal() {

        float total = 0;
        for (DetallePedido dp : this.getDetallePedido()) {
            total += dp.getSubTotal();
        }

        return new BigDecimal(total, new MathContext(2));
    }
}
