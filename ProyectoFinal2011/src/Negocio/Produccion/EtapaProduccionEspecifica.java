package Negocio.Produccion;
// Generated 12/08/2011 13:27:23 by Hibernate Tools 3.2.1.GA

import Negocio.Administracion.Cargo;
import Negocio.Produccion.DetalleEtapaProduccion;
import Negocio.Produccion.DetallePlanProduccion;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.hibernate.annotations.Cascade;

/**
 * TEtapasProduccionEspecifica generated by hbm2java
 */
@Entity
@Table(name = "T_ETAPAS_PRODUCCION_ESPECIFICA", schema = "dbo", catalog = "Ramaty")
public class EtapaProduccionEspecifica implements java.io.Serializable {

    @Id
    @GeneratedValue
    @Column(name = "ID_ETAPA_PRODUCCION_ESPECIFICA", unique = true, nullable = false, precision = 5, scale = 0)
    private int idEtapaProduccionEspecifica;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_CARGO")//, nullable = false)
    private Cargo TCargos;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_ETAPA_PRODUCCION")//, nullable = false)
    private EtapaProduccion TEtapasProduccion;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_PRODUCTO")//, nullable = false)
    private Producto TProductos;
    @Column(name = "DESCRIPCION_ESPECIFICA", length = 200)//, nullable = false
    private String descripcionEspecifica;
    @Column(name = "HORAS_HOMBRE",  precision = 6)//nullable = false,
    private BigDecimal horasHombre;
    @Column(name = "NUMERO_ORDEN",  precision = 2, scale = 0)//nullable = false,
    private Byte numeroOrden;
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "TEtapasProduccionEspecifica")
    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
    private Set<DetalleEtapaProduccion> TDetallesEtapas = new HashSet<DetalleEtapaProduccion>(0);
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "TEtapasProduccionEspecifica")
    private Set<DetallePlanProduccion> TDetallesPlans = new HashSet<DetallePlanProduccion>(0);
    //private Set<TipoMaquinaHerramienta> TTmaquinaHerramientas = new HashSet<TipoMaquinaHerramienta>(0);

    public EtapaProduccionEspecifica() {
    }

    public EtapaProduccionEspecifica(int idEtapaProduccionEspecifica, Cargo TCargos, EtapaProduccion TEtapasProduccion, Producto TProductos, String descripcionEspecifica, BigDecimal horasHombre, byte numeroOrden) {
        this.idEtapaProduccionEspecifica = idEtapaProduccionEspecifica;
        this.TCargos = TCargos;
        this.TEtapasProduccion = TEtapasProduccion;
        this.TProductos = TProductos;
        this.descripcionEspecifica = descripcionEspecifica;
        this.horasHombre = horasHombre;
        this.numeroOrden = numeroOrden;
    }

    public EtapaProduccionEspecifica(int idEtapaProduccionEspecifica, Cargo TCargos, EtapaProduccion TEtapasProduccion, Producto TProductos, String descripcionEspecifica, BigDecimal horasHombre, byte numeroOrden, Set<DetalleEtapaProduccion> TDetallesEtapas, Set<DetallePlanProduccion> TDetallesPlans) {
        this.idEtapaProduccionEspecifica = idEtapaProduccionEspecifica;
        this.TCargos = TCargos;
        this.TEtapasProduccion = TEtapasProduccion;
        this.TProductos = TProductos;
        this.descripcionEspecifica = descripcionEspecifica;
        this.horasHombre = horasHombre;
        this.numeroOrden = numeroOrden;
        this.TDetallesEtapas = TDetallesEtapas;
        this.TDetallesPlans = TDetallesPlans;
    }

    public int getId() {
        return this.idEtapaProduccionEspecifica;
    }

    public void setId(int idEtapaProduccionEspecifica) {
        this.idEtapaProduccionEspecifica = idEtapaProduccionEspecifica;
    }

    public Cargo getCargo() {
        return this.TCargos;
    }

    public void setCargo(Cargo TCargos) {
        this.TCargos = TCargos;
    }

    public EtapaProduccion getEtapaProduccion() {
        return this.TEtapasProduccion;
    }

    public void setEtapaProduccion(EtapaProduccion TEtapasProduccion) {
        this.TEtapasProduccion = TEtapasProduccion;
    }

    public Producto getProducto() {
        return this.TProductos;
    }

    public void setProducto(Producto TProductos) {
        this.TProductos = TProductos;
    }

    public String getDescripcion() {
        return this.descripcionEspecifica;
    }

    public void setDescripcion(String descripcionEspecifica) {
        this.descripcionEspecifica = descripcionEspecifica;
    }

    public BigDecimal getHorasHombre() {
        return this.horasHombre;
    }

    public void setHorasHombre(BigDecimal horasHombre) {
        this.horasHombre = horasHombre;
    }

    public Byte getNumeroOrden() {
        return this.numeroOrden;
    }

    public void setNumeroOrden(Byte numeroOrden) {
        this.numeroOrden = numeroOrden;
    }

    public List<DetalleEtapaProduccion> getDetalleEtapaProduccion() {
        return new ArrayList<DetalleEtapaProduccion>(this.TDetallesEtapas);
    }

    public void setDetalleEtapaProduccion(List<DetalleEtapaProduccion> detalle) {
        this.TDetallesEtapas.clear();
        for (DetalleEtapaProduccion dt : detalle) {
            dt.setEtapaProduccionEspecifica(this);
            TDetallesEtapas.add(dt);
        }
    }



    public void addDetalleEtapaProduccion(DetalleEtapaProduccion detalle) {

            detalle.setEtapaProduccionEspecifica(this);
            TDetallesEtapas.add(detalle);

    }

    public List<DetallePlanProduccion> getDetallePlanProduccion() {
        return new ArrayList<DetallePlanProduccion>(this.TDetallesPlans);
    }

    public void addDetallePlanProduccion(DetallePlanProduccion detalle)
    {
        if(TDetallesPlans.contains(detalle)==false)
            TDetallesPlans.add(detalle);
    }

    public void setDetallePlanProduccion(List<DetallePlanProduccion> detalle) {
        this.TDetallesPlans.clear();
        for (DetallePlanProduccion dt : detalle) {
            TDetallesPlans.add(dt);
        }
    }
    //@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="TEtapasProduccionEspecifica")
//    public Set<TipoMaquinaHerramienta> getTTmaquinaHerramientas() {
//        return this.TTmaquinaHerramientas;
//    }
//
//    public void setTTmaquinaHerramientas(Set<TipoMaquinaHerramienta> TTmaquinaHerramientas) {
//        this.TTmaquinaHerramientas = TTmaquinaHerramientas;
//    }
}
