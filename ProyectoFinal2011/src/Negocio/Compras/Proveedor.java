package Negocio.Compras;
// Generated 12/08/2011 13:27:23 by Hibernate Tools 3.2.1.GA

import Negocio.Exceptiones.TipoDatoException;
import Negocio.UbicacionGeografica.Domicilio;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.Cascade;

/**
 * TProveedores generated by hbm2java
 */
@Entity
@Table(name = "T_PROVEEDORES", schema = "dbo", catalog = "Ramaty")
public class Proveedor implements java.io.Serializable {

    @Id
    @GeneratedValue
    @Column(name = "ID_PROVEEDOR", unique = true, nullable = false, precision = 3, scale = 0)
    private short idProveedor;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_DOMICILIO")//, nullable = false)
    private Domicilio TDomicilios;
    @Column(name = "RAZON_SOCIAL", nullable = true, length = 50)
    private String razonSocial;
    @Column(name = "NOMBRE_RESPONSABLE", nullable = true, length = 100)
    private String nombreResponsable;
    @Column(name = "PAGINA_WEB", length = 50)
    private String paginaWeb;
    @Column(name = "TELEFONO", length = 20)
    private String telefono;
    @Column(name = "CORREO_ELECTRONICO", length = 50)
    private String correoElectronico;
    @Column(name = "APELLIDO_RESPONSABLE")//, nullable = false, length = 100)
    private String apellidoResponsable;
    @Column(name = "CUIT", nullable = false, length = 20)
    private String cuit;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "FEC_BAJA", length = 23)
    private Date fecBaja;
    @Column(name = "MOTIVO_BAJA", length = 100)
    private String motivoBaja;
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "TProveedores")
    private Set<OrdenCompra> TOrdenesCompras = new HashSet<OrdenCompra>(0);
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "TProveedores")
    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
    private Set<MaterialesXProveedor> TMaterialesXProveedors = new HashSet<MaterialesXProveedor>(0);

    public Proveedor() {
    }

    public Proveedor(short idProveedor, Domicilio TDomicilios, String nombre, String apellido) {
        this.idProveedor = idProveedor;
        this.TDomicilios = TDomicilios;
        this.nombreResponsable = nombre;
        this.apellidoResponsable = apellido;
    }

    public Proveedor(short idProveedor, Domicilio TDomicilios, String nombre, String paginaWeb, String telefono, String correoElectronico, String apellido, Set<OrdenCompra> TOrdenesCompras, Set<MaterialesXProveedor> TMaterialesXProveedors) {
        this.idProveedor = idProveedor;
        this.TDomicilios = TDomicilios;
        this.nombreResponsable = nombre;
        this.paginaWeb = paginaWeb;
        this.telefono = telefono;
        this.correoElectronico = correoElectronico;
        this.apellidoResponsable = apellido;
        this.TOrdenesCompras = TOrdenesCompras;
        this.TMaterialesXProveedors = TMaterialesXProveedors;
    }

    public short getId() {
        return this.idProveedor;
    }

    public void setId(short idProveedor) {
        this.idProveedor = idProveedor;
    }

    public String getRazonSocial() {
        return razonSocial;
    }

    public void setRazonSocial(String razonSocial) throws TipoDatoException{
        if(razonSocial.trim().compareTo("")==0)
            throw new TipoDatoException("Debe introduccir la razon social");
        this.razonSocial = razonSocial;
    }

    public Domicilio getDomicilio() {
        return this.TDomicilios;
    }

    public void setDomicilio(Domicilio TDomicilios) throws TipoDatoException{
        if(TDomicilios==null)
            throw new TipoDatoException("");
        this.TDomicilios = TDomicilios;
    }

    public String getNombreResponsable() {
        return this.nombreResponsable;
    }

    public void setNombreResponsable(String nombre) throws TipoDatoException{
        if(nombre.trim().compareTo("")==0)
            throw new TipoDatoException("Debe introducir el nombre del responsable");
        this.nombreResponsable = nombre;
    }

    public String getPaginaWeb() {
        return this.paginaWeb;
    }

    public void setPaginaWeb(String paginaWeb) throws TipoDatoException{
        if(paginaWeb.trim().compareTo("")==0)
            this.paginaWeb=null;
        this.paginaWeb = paginaWeb;
    }

    public String getTelefonoResponsable() {
        return this.telefono;
    }

    public void setTelefonoResponsable(String telefono) throws TipoDatoException {
        if(telefono.trim().compareTo("")==0)
            throw new TipoDatoException("Debe introduccir el telefono del responsable");
        this.telefono = telefono;
    }

    public String getCorreoElectronico() {
        return this.correoElectronico;
    }

    public void setCorreoElectronico(String correoElectronico)throws TipoDatoException {
        if(correoElectronico.trim().compareTo("")==0)
            throw new TipoDatoException("Debe introduccir un e-mail del responsable");
        this.correoElectronico = correoElectronico;
    }

    public String getCuit() {
        return this.cuit;
    }

    public void setCuit(String cuit)throws TipoDatoException {
        if(cuit.trim().compareTo("")==0)
            throw new TipoDatoException("Debe introducir un cuit");
        this.cuit = cuit;
    }

    public Date getFecBaja() {
        return this.fecBaja;
    }

    public void setFecBaja(Date fecBaja) {
        this.fecBaja = fecBaja;
    }

    public String getMotivoBaja() {
        return this.motivoBaja;
    }

    public void setMotivoBaja(String motivoBaja){
        this.motivoBaja = motivoBaja;
    }

    public String getApellidoResponsable() {

        return this.apellidoResponsable;
    }

    public void setApellidoResponsable(String apellido)throws TipoDatoException {
        if(apellido.trim().compareTo("")==0)
            throw new TipoDatoException("Debe introduccir el apellido del responsable");
        this.apellidoResponsable = apellido;
    }

    public Set<OrdenCompra> getOrdenesCompra() {
        return this.TOrdenesCompras;
    }

    public void setOrdenesCompra(Set<OrdenCompra> TOrdenesCompras) {
        this.TOrdenesCompras = TOrdenesCompras;
    }

    public List<Material> getMateriales() {
        ArrayList<Material> salida = new ArrayList<Material>(this.TMaterialesXProveedors.size());
        for (MaterialesXProveedor mxp : this.TMaterialesXProveedors) {
            salida.add(mxp.getMaterial());
        }
        return salida;
    }

    public void setMateriales(List<Material> materiales) {
        this.TMaterialesXProveedors.clear();
        for (Material m : materiales) {
            this.TMaterialesXProveedors.add(new MaterialesXProveedor(this, m));
        }
    }

    @Override
    public boolean equals(Object obj) {
        try {
//            if(((Proveedor)obj).getRazonSocial().equalsIgnoreCase(this.getRazonSocial()))
//                return true;
            if (((Proveedor) obj).getCuit().equalsIgnoreCase(this.getCuit()))
            return true;

        } catch (Exception e) {
        }
        return false;
    }

    @Override
    public String toString() {
        return this.getRazonSocial();
    }

    public boolean validarOk() throws TipoDatoException{
        String mje="Algunos campos no han sido ingresado correctamente.";
        if(this.razonSocial==null)
            throw new TipoDatoException(mje);
        if(this.cuit==null)
            throw new TipoDatoException(mje);
        if(this.correoElectronico==null)
            throw new TipoDatoException(mje);
        if(this.nombreResponsable==null)
            throw new TipoDatoException(mje);
        if(this.apellidoResponsable==null)
            throw new TipoDatoException(mje);
        if(this.telefono==null)
            throw new TipoDatoException(mje);
        
      try{
          TDomicilios.validarOk();
      }catch(TipoDatoException ex){
        throw new TipoDatoException(mje);}



        return true;
    }
}
